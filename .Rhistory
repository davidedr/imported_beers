sapply(deg, function(n) {
lines(df_train$x, models[, n]$fitted.values, col = colors[n], lwd = 1)
}
)
# Chunk 13
rmms_train = sapply(deg, function(n) sqrt(sum((df_train$y - models[, n]$fitted.values)^2)/length(df_train$y)))
plot(deg, rmms_train, type = "l", col = "red", lwd = 2)
# Chunk 14
rmms_test = sapply(deg, function(n) {
predicted = predict(models[, n], newdata = df_test)
}
)
models[, 2]$coefficients[1]
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
set.seed(0)
# Chunk 2
x = seq(from = 0, to = 4*pi, by = 4*pi/201)
signal= sin(x)
noise = runif(length(x), -1, 1)
noise = rnorm(length(x), mean=0, sd=0.3)
y = signal + noise
# Chunk 3
df = data.frame(x, signal, noise, y)
rm("x", "y", "signal", "noise")
# Chunk 4
train_fraction = 3/4
train_size <- floor(train_fraction * nrow(df))
train_ind <- sample(seq_len(nrow(df)), size = train_size)
df_train <- df[train_ind, ]
df_test <- df[-train_ind, ]
# Chunk 5
plot(df$x, df$signal, type = "l", lwd = 3, col = "red")
plot(df_train$x, df_train$signal, type = "l", lwd = 3, col = "red")
points(df_train$x, df_train$y, col = "blue")
lines(df_train$x, df_train$y, lwd = 1, col = "green")
# Chunk 6
m_1 = lm(y ~ x, data = df_train)
print(m_1$coefficients)
plot(df_train$x, df_train$y, type = "l", col = "red", lwd = 3)
lines(df_train$x, m_1$fitted.values, col = "blue", lwd = 2)
plot(m_1)
print(m_2$coefficients)
plot(df_train$x, df_train$y, type = "l", col = "red", lwd = 3)
lines(df_train$x, m_2$fitted.values, col = "blue", lwd = 2)
plot(m_2)
# Chunk 8
m_3 = lm(y ~ x + I(x^2) + I(x^3), data = df_train)
print(m_3$coefficients)
plot(df_train$x, df_train$y, type = "l", col = "red", lwd = 3)
lines(df_train$x, m_3$fitted.values, col = "blue", lwd = 2)
plot(m_3)
print(m_3$coefficients)
plot(df_train$x, df_train$y, type = "l", col = "red", lwd = 3)
lines(df_train$x, m_3$fitted.values, col = "blue", lwd = 2)
plot(m_3)
print(paste("Fitting ", n, "-th order model..."))
lm(y ~ poly(x, n, raw = TRUE))
}
# Chunk 11
deg = seq(from = 1, to = 100)
models = sapply(deg, function(n) f(df_train$x, df_train$y, n), simplify = TRUE)
# Chunk 12
plot(df_train$x, df_train$signal, type = "l", lwd = 3, col = "red")
points(df_train$x, df_train$y, col = "blue")
library(RColorBrewer)
colors<-brewer.pal(length(deg), name = "Set1")
sapply(deg, function(n) {
lines(df_train$x, models[, n]$fitted.values, col = colors[n], lwd = 1)
}
)
# Chunk 13
rmms_train = sapply(deg, function(n) sqrt(sum((df_train$y - models[, n]$fitted.values)^2)/length(df_train$y)))
plot(deg, rmms_train, type = "l", col = "red", lwd = 2)
deg = seq(from = 1, to = 100)
models = sapply(deg, function(n) f(df_train$x, df_train$y, n), simplify = TRUE)
f <- function(x, y, n) {
print(paste("Fitting ", n, "-th order model..."))
lm(y ~ poly(x, n, raw = TRUE))
}
deg = seq(from = 1, to = 100)
models = sapply(deg, function(n) f(df_train$x, df_train$y, n), simplify = TRUE)
models[, 2]$coefficients[1]
models[, 2]$coefficients[2]
models[, 2]$coefficients[32]
models[, 2]$coefficients[3]
models[, 2]$coefficients[4]
for (i in 0:length(models[, 2]$coefficients)) { print(cat(i, models[, 2]$coefficients[i+1]))}
models[, 2]$coefficients[0]
models[, 2]$coefficients[1]
models[, 2]$coefficients[2]
models[, 2]$coefficients[3]
models[, 2]$coefficients[4]
for (i in 0:length(models[, 2]$coefficients)-1) { print(cat(i, models[, 2]$coefficients[i+1]))}
for (i in 0:length(models[, 2]$coefficients)-1) { print(paste(i, ", ", models[, 2]$coefficients[i+1]))}
for (i in 0:(length(models[, 2]$coefficients)-1)) { print(paste(i, ", ", models[, 2]$coefficients[i+1]))}
sapply(df$x, function(x) {
y_hat = 0
for (i in 0:(length(models[, 2]$coefficients-1))) {
y_hat = y_hat + models[, 2]$coefficients[i+1]*x^i
}
print(y_hat)
}
)
for (i in 0:(length(models[, 2]$coefficients)-1)) { print(paste(i, ", ", models[, 2]$coefficients[i+1]))}x=df$x[1]
x = df$x[1]
x
sapply(df$x, function(x) {
y_hat = 0
for (i in 0:(length(models[, 2]$coefficients-1))) {
y_hat = y_hat + models[, 2]$coefficients[i+1]*x^i
}
print(y_hat)
}
)
sapply(df$x, function(x) {
y_hat = 0
for (i in 0:(length(models[, 2]$coefficients)-1)) {
y_hat = y_hat + models[, 2]$coefficients[i+1]*x^i
}
print(y_hat)
}
)
pred = sapply(deg, function(n) {
sapply(df$x, function(x) {
y_hat = 0
for (i in 0:(length(models[, n]$coefficients)-1)) {
y_hat = y_hat + models[, n]$coefficients[i+1]*x^i
}
print(y_hat)
}
)
}
)
xpreds
pred
pred = sapply(deg, function(n) {
sapply(df$x, function(x) {
y_hat = 0
for (i in 0:(length(models[, n]$coefficients)-1)) {
y_hat = y_hat + models[, n]$coefficients[i+1]*x^i
}
print(paste(n, ", ", y_hat))
}
)
}
)
View(pred)
pred = sapply(deg, function(n) {
sapply(df_test$x, function(x, n) {
y_hat = 0
for (i in 0:(length(models[, n]$coefficients)-1)) {
y_hat = y_hat + models[, n]$coefficients[i+1]*x^i
}
print(paste(n, ", ", y_hat))
}
)
}
)
pred = sapply(deg, function(n) {
sapply(df_test$x, function(x) {
y_hat = 0
print(paste(n, ", ", y_hat))
}
)
}
)
pred = sapply(deg, function(n) {
sapply(df_test$x, function(x) {
y_hat = 0
print(paste(n, ", ", x, ", ", y_hat))
}
)
}
)
pred = sapply(deg, function(n) {
sapply(df_test$x, function(x) {
y_hat = 0
for (i in 0:(length(models[, n]$coefficients)-1)) {
y_hat = y_hat + models[, n]$coefficients[i+1]*x^i
}
print(paste(n, ", ", x, ", ", y_hat))
}
)
}
)
deg = c(1, 2)
pred = sapply(deg, function(n) {
sapply(df_test$x, function(x) {
y_hat = 0
for (i in 0:(length(models[, n]$coefficients)-1)) {
y_hat = y_hat + models[, n]$coefficients[i+1]*x^i
}
}
)
print(paste(n, ", ", x, ", ", y_hat))
}
)
deg = c(1, 2)
pred = sapply(deg, function(n) {
sapply(df_test$x, function(x) {
y_hat = 0
for (i in 0:(length(models[, n]$coefficients)-1)) {
y_hat = y_hat + models[, n]$coefficients[i+1]*x^i
}
print(paste(n, ", ", x, ", ", y_hat))
}
)
}
)
```
deg = seq(from=1, to=5)
pred = sapply(deg, function(n) {
sapply(df_test$x, function(x) {
y_hat = 0
for (i in 0:(length(models[, n]$coefficients)-1)) {
y_hat = y_hat + models[, n]$coefficients[i+1]*x^i
}
print(paste(n, ", ", x, ", ", y_hat))
}
)
}
)
deg = seq(from=1, to=50)
pred = sapply(deg, function(n) {
sapply(df_test$x, function(x) {
y_hat = 0
for (i in 0:(length(models[, n]$coefficients)-1)) {
y_hat = y_hat + models[, n]$coefficients[i+1]*x^i
}
print(paste(n, ", ", x, ", ", y_hat))
}
)
}
)
deg = seq(from=1, to=80)
pred = sapply(deg, function(n) {
sapply(df_test$x, function(x) {
y_hat = 0
for (i in 0:(length(models[, n]$coefficients)-1)) {
}
y_hat = y_hat + models[, n]$coefficients[i+1]*x^i
print(paste(n, ", ", x, ", ", y_hat))
}
)
}
)
dim (models)
deg = seq(from=1, to=100)
pred = sapply(deg, function(n) {
sapply(df_test$x, function(x) {
y_hat = 0
for (i in 0:(length(models[, n]$coefficients)-1)) {
y_hat = y_hat + models[, n]$coefficients[i+1]*x^i
}
print(paste(n, ", ", x, ", ", y_hat))
}
)
}
)
deg = seq(from=1, to=100)
pred = sapply(deg, function(n) {
coeff = models[, n]$coefficients
print(paste(n, ", ", coeff))
sapply(df_test$x, function(x) {
y_hat = 0
for (i in 0:(length(models[, n]$coefficients)-1)) {
y_hat = y_hat + coeff[i+1]*x^i
}
print(paste(n, ", ", x, ", ", y_hat))
}
)
}
)
```
deg = seq(from=1, to=100)
pred = sapply(deg, function(n) {
coeff = models[, n]$coefficients
coeff[is.na(coeff)] = 0
print(paste(n, ", ", coeff))
sapply(df_test$x, function(x) {
y_hat = 0
for (i in 0:(length(models[, n]$coefficients)-1)) {
y_hat = y_hat + coeff[i+1]*x^i
}
print(paste(n, ", ", x, ", ", y_hat))
}
}
)
)
pred = sapply(deg, function(n) {
coeff = models[, n]$coefficients
coeff[is.na(coeff)] = 0
print(paste(n, ", ", coeff))
})
deg = seq(from=1, to=100)
pred = sapply(deg, function(n) {
coeff = models[, n]$coefficients
coeff[is.na(coeff)] = 0
print(paste(n, ", ", coeff))
sapply(df_test$x, function(x) {
y_hat = 0
for (i in 0:(length(models[, n]$coefficients)-1)) {
y_hat = y_hat + coeff[i+1]*x^i
}
print(paste(n, ", ", x, ", ", y_hat))
}
)
}
)
View(pred)
rmms_test = sapply(deg, function(n) sqrt(sum((df_test$y - predicted[, n)^2)/length(df_train$y)))
rmms_test = sapply(deg, function(n) sqrt(sum((df_test$y - predicted[, n])^2)/length(df_train$y)))
deg = seq(from=1, to=100)
predicted = sapply(deg, function(n) {
coeff = models[, n]$coefficients
coeff[is.na(coeff)] = 0
print(paste(n, ", ", coeff))
sapply(df_test$x, function(x) {
y_hat = 0
for (i in 0:(length(models[, n]$coefficients)-1)) {
y_hat = y_hat + coeff[i+1]*x^i
}
print(paste(n, ", ", x, ", ", y_hat))
}
)
}
)
rmms_test = sapply(deg, function(n) sqrt(sum((df_test$y - predicted[, n])^2)/length(df_train$y)))
```
rmms_test = sapply(deg, function(n) sqrt(sum((df_test$y - predicted[, n])^2)/length(df_train$y)))
df_test$y
predicted[, 1]
deg = seq(from=1, to=100)
predicted = sapply(deg, function(n) {
coeff = models[, n]$coefficients
coeff[is.na(coeff)] = 0
print(paste(n, ", ", coeff))
sapply(df_test$x, function(x) {
y_hat = 0
for (i in 0:(length(models[, n]$coefficients)-1)) {
y_hat = y_hat + coeff[i+1]*x^i
}
print(paste(n, ", ", x, ", ", y_hat))
y_hat
}
)
}
)
rmms_test = sapply(deg, function(n) sqrt(sum((df_test$y - predicted[, n])^2)/length(df_train$y)))
rmms_test
rmms_train = sapply(deg, function(n) sqrt(sum((df_train$y - models[, n]$fitted.values)^2)/length(df_train$y)))
plot(deg, rmms_train, type = "l", col = "red", lwd = 2)
lines(deg, rmms_test, lwd=2, col="blue")
plot(deg, rmms_test, type = "l", col = "blue", lwd = 2)
lines(deg, rmms_train, lwd=2, col="red")
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
mirror = 'http://cran.us.r-project.org'
x
x = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
len(x)
length(x)
x = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
y = x
xtable::xtable(c(x, y), digits=c(0, 2, 2, 1, 2))
xtable(c(x, y), digits=c(0, 2, 2, 1, 2))
library(xtable)
xtable(c(x, y), digits=c(0, 2, 2, 1, 2))
xtable(x, digits=c(0, 2, 2, 1, 2))
kable(x)
library(knitr)
kable(x)
kable(x, digits = 2)
x = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
names(x) = "x"
x
df =data.frame(x = x, y = y)
df
kable(df)
library(knitr)
kable(x, digits = 2)
plot(x, y, pch = 19, col = 'red')
kable(x, digits = 2)
library(knitr)
kable(df, digits = 2)
plot(x, y, pch = 19, col = 'red')
render
library(rmarkdown)
render
cox_x_y = sum((x - mean(x))(y - mean(y)))/(length(x) - 1)
cox_x_y = sum((x - mean(x))*(y - mean(y)))/(length(x) - 1)
render
cox_x_y = sum((x - mean(x))*(y - mean(y)))/(length(x) - 1)
cov_x_y_r = cov(x, y)
cov_x_y_r
?cov
par(mfrow = c(1, 2))
plot(x, y, pch = 19, col = 'red')
plot(x_3, y_3, pch = 19, col = 'red')
x_3 = x*100
y_3 = x_2
kable(data.frame(x = x_3, y = y_3), digits = 2)
plot(x_3, y_3, pch = 19, col = 'red')
x_3 = x*100
y_3 = x_3
plot(x_3, y_3, pch = 19, col = 'red')
cov_x_y_3 = sum((x_3 - mean(x_3))*(y_3 - mean(y_3)))/(length(x_3) - 1)
cov_x_y_3
s_x = sqrt(sum((x-mean(x))^2)/(length(x) - 1))
s_y_1 = sqrt(sum((y_1 - mean(y_1))^2)/(length(y_1) - 1))
y_1 = x
s_y_1 = sqrt(sum((y_1 - mean(y_1))^2)/(length(y_1) - 1))
r_x_y1 = sum((x - mean(x))(y_1 - mean(y1)))/length(x - 1)/(s_x*s_y_1)
s_x = sqrt(sum((x - mean(x))^2)/(length(x) - 1))
s_x
s_y_1 = sqrt(sum((y_1 - mean(y_1))^2)/(length(y_1) - 1))
r_x_y1 = sum((x - mean(x))(y_1 - mean(y1)))/length(x - 1)/(s_x*s_y_1)
s_x = sqrt(sum((x - mean(x))^2)/(length(x) - 1))
s_y_1 = sqrt(sum((y_1 - mean(y_1))^2)/(length(y_1) - 1))
r_x_y1 = sum((x - mean(x)*(y_1 - mean(y1))))/(length(x) - 1)/(s_x*s_y_1)
s_x = sqrt(sum((x - mean(x))^2)/(length(x) - 1))
s_y_1 = sqrt(sum((y_1 - mean(y_1))^2)/(length(y_1) - 1))
r_x_y_1 = sum((x - mean(x)*(y_1 - mean(y_1))))/(length(x) - 1)/(s_x*s_y_1)
tonytonytony255@yahoo.com
r_x_y_1
cor(x, x_1)
cor(x, y_1)
s_x = sqrt(sum((x - mean(x))^2)/(length(x) - 1))
var(x)^2
s_X
s_x = sqrt(sum((x - mean(x))^2)/(length(x) - 1))
s_y_1 = sqrt(sum((y_1 - mean(y_1))^2)/(length(y_1) - 1))
r_x_y_1 = sum((x - mean(x)*(y_1 - mean(y_1))))/(length(x) - 1)/(s_x*s_y_1)
s_x
var(x)
sqrt(var(x))
sqrt(var(y_1))
cov_x_y1 = sum((x - mean(x)*(y_1 - mean(y_1))))/(length(x) - 1)
cov_x_y1
cov(x, y_1)
cov_x_y1 = sum((x - mean(x))*(y_1 - mean(y_1)))/(length(x) - 1)
cov(x, y_1)
r_x_y_1 = cov_x_y1/(s_x*s_y_1)
r_x_y_1
s_x_3 = sqrt(sum((x_3 - mean(x_3))^2)/(length(x_3) - 1))
s_y_3 = sqrt(sum((y_3 - mean(y_3))^2)/(length(y_3) - 1))
cov_x_y_3 = sum((x_3 - mean(x_3))*(y_3 - mean(y_3)))/(length(y_3) - 1)
r_x_y_3 = cov_x_y_3/(s_x_3*s_y_3)
par(mfrow = c(4, 1))
plot(x, y_1, pch = 19, col = "red")
plot(x, y_2, pch = 19, col = "red")
plot(x, y_3, pch = 19, col = "red")
y_4 = -y_3
plot(x, y_4, pch = 19, col = "red")
df = data.frame(series = c(1, 2, 3, 4), covariance=c(cov(x, y_1), cov(x, y_2), cov(x, y_3), cov(x, y_4)), corrrelation=c(cor(x, y_1), cor(x, y_2), cor(x, y_3), cor(x, y_4)))
kable(df, digits = 2)
rm(list = ls())
mirror = 'http://cran.us.r-project.org'
```{r}
if (!require(conjoint)) {
install.packages("conjoint", repos = mirror, dependencies = TRUE)
require(conjoint)
library(conjoint)
}
data(tea)
str(tprof)
tprof # matrix of profiles
View(tpref)
cov_x_y_3 = sum((x_3 - mean(x_3))*(y_3 - mean(y_3)))/(length(y_3) - 1)
tprof
tsimp
tlevn
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
mirror = 'http://cran.us.r-project.org'
setwd("C:/Nuova cartella/Udemy Modelling Customers' Choices/Imported Beers")
if (!require(conjoint)) {
install.packages("conjoint", repos = mirror, dependencies = TRUE)
require(conjoint)
library(conjoint)
}
factors_list <- list(
Origin = c("European", "Canadian", "Japanese"),
Price = c("6.19","5.49","4.79"),
Body = c("Rich full bodied","Regular","Crisp and clear"),
Aftertaste = c("strong","mild", "very mild"),
Calories = c("full", "regular", "low"),
Packaging = c("Six 12Oz Large", "Six 12Oz Small",   "Four 16Oz"),
Glass = c("Green Label",    "Brown Label",  "Brown Painted")
)
print(factors_list)
kable(as.data.frame(factors_list))
if (!require(kable)) {
install.packages("kable", repos = mirror, dependencies = TRUE)
require(kable)
library(kable)
}
kable(as.data.frame(factors_list))
kable(as.data.frame(factors_list))
if (!require(kable)) {
install.packages("kable", repos = mirror, dependencies = TRUE)
require(kable)
library(kable)
}
if (!require(knitr)) {
install.packages("knitr", repos = mirror, dependencies = TRUE)
require(knitr)
library(knitr)
}
kable(as.data.frame(factors_list))
